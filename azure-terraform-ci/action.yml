name: 'Composite Terraform'
description: 'Composite Terraform GitHub Actions'
inputs:
  terraformVersion:
    description: ''
    required: true
  githubToken: 
    description: ''
    required: true
  mindboxOrgGithubToken:
    description: 'Used to download organization wide resources, like terraform-modules repo'
    required: true
  workingDir:
    description: ''
    required: true
  tfBackendAccessKey:
    description: ''
    required: true
  tfBackendSecretKey:
    description: ''
    required: true
  servicePrincipalClientSecret:
    description: ''
    required: true
  armClientId:
    description: ''
    required: true
  armTenantId:
    description: ''
    required: true
  armSubscriptionId:
    description: ''
    required: true
  planAdditionalVars:
    description: ''
    required: false
    default: ''
  installTerraformUnofficialProviders:
    description: ''
    required: false
    default: '0'
outputs: {}
runs:
  using: "composite"
  steps:
    - name: "Setup Terraform"
      uses: hashicorp/setup-terraform@v1
      with:
          terraform_version: ${{ inputs.terraformVersion }}
          terraform_wrapper: false

    - name: "Install terraform unofficial providers"
      run: |
        if [[ ${{ inputs.installTerraformUnofficialProviders }} -eq "1" ]]; then
          set -e

          echo "Downloading octopusdeploy provider binary"
          wget https://github.com/nmlc/terraform-provider-octopusdeploy/releases/download/v0.6.3/terraform-provider-octopusdeploy_linux_amd64

          echo "Installing octopusdeploy provider"
          mkdir -p ~/.terraform.d/plugins/octopus.com/com/octopusdeploy/0.6/linux_amd64
          mv terraform-provider-octopusdeploy_linux_amd64 ~/.terraform.d/plugins/octopus.com/com/octopusdeploy/0.6/linux_amd64
          chmod 777 ~/.terraform.d/plugins/octopus.com/com/octopusdeploy/0.6/linux_amd64/terraform-provider-octopusdeploy_linux_amd64
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Terraform Format"
      id: fmt
      run: terraform fmt
      # continue-on-error: true
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Setup github token for module repo"
      run: |
        git config --local --remove-section http."https://github.com/"
        git config --global url."https://octopus-mindbox:${OCTOPUS_MINDBOX_GITHUB_TOKEN}@github.com/mindbox-moscow".insteadOf "https://github.com/mindbox-moscow"
      env:
        OCTOPUS_MINDBOX_GITHUB_TOKEN: ${{ inputs.mindboxOrgGithubToken }}
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Terraform Init"
      id: init
      run: terraform init
        -backend-config="access_key=${{ inputs.tfBackendAccessKey }}"
        -backend-config="secret_key=${{ inputs.tfBackendSecretKey }}"
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Terraform Validate"
      id: validate
      run: terraform validate -no-color
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Terraform Plan"
      id: plan
      run: |
        set +e
        PLAN="terraform plan ${{ inputs.planAdditionalVars }}  -no-color -out=plan.tfplan -detailed-exitcode"
        $PLAN
        echo "::set-output name=planExitCode::$?"
        exit 0
      env:
        ARM_CLIENT_ID: ${{ inputs.armClientId }}
        ARM_TENANT_ID: ${{ inputs.armTenantId }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.armSubscriptionId }}
        ARM_CLIENT_SECRET: "${{ inputs.servicePrincipalClientSecret }}"
      working-directory: ${{ inputs.workingDir }}
      # continue-on-error: true
      shell: bash

    - name: "Fail if plan failed"
      id: failIfPlanFailed
      run: |
        echo "planExitCode is: ${{ steps.plan.outputs.planExitCode }}"
        set -x
        if [[ ${{ steps.plan.outputs.planExitCode }} -eq 1 ]]; then
          exit 1
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Setup Terraform"
      uses: hashicorp/setup-terraform@v1
      with:
          terraform_version: ${{ inputs.terraformVersion }}
    
    - name: "Terraform Show"
      id: show
      run: |
        if [[ ${{ steps.plan.outputs.planExitCode }} -ne 0 ]]; then
          terraform show -no-color plan.tfplan
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Kafka check"
      id: kafkaCheck
      run: |
        if [[ ${{ steps.plan.outputs.planExitCode }} -ne 0 ]]; then
          if test "$(terraform show -no-color plan.tfplan | grep -oP '# module\.kafka.*[broker|zookeeper]\[\K(".*")(?=\]\..*updated in\-place)' | sort -u | wc -l)" -gt 1; then
            RED='\033[0;31m'
            echo -e "${RED} You must update kafka brokers and zookeepers one by one only!"
            exit 1
          fi 
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Truncate plan"
      id: truncate-plan
      run: |
        plan="${{ steps.show.outputs.stdout }}"
        echo "plan=${plan:0:65536}" >> $GITHUB_OUTPUT
        original_length=${#plan}
        if (($original_length > 65536)); then truncated=true; else truncated=false; fi
        echo "truncated=${truncated}" >> $GITHUB_OUTPUT
      shell: bash

    - uses: actions/github-script@0.9.0
      name: "Comment plan"
      env:
        PLAN: "${{ steps.truncate-plan.outputs.plan }}"
        SHOW_PLAN: ${{ steps.truncate-plan.outputs.truncated != 'true' }}
        CONDITION: "${{ steps.plan.outputs.planExitCode }}"
      with:
        github-token: ${{ inputs.githubToken }}
        script: |
          if (process.env.CONDITION == "2") {
            const planMessage = process.env.SHOW_PLAN == "true"
              ? `\`\`\`terraform\n ${process.env.PLAN} \n\`\`\``
              : "Please, refer to [Github Action logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})";

            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`Success with non-empty diff\`
            
            <details><summary>Show Plan</summary>
            
            ${planMessage}
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.workingDir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
