name: CI

on:
  workflow_call:
    inputs:
      typechecking:
        description: "True if need to run check-types"
        default: false
        required: false
        type: boolean
      graphql_codegen:
        description: "True if need to run graphql-codegen"
        default: false
        required: false
        type: boolean
      linters:
        description: "True if need run check-scripts"
        default: false
        required: false
        type: boolean
      style_linters:
        description: "True if need run check-styles"
        default: false
        required: false
        type: boolean
      tests:
        description: "True if need run tests"
        default: false
        required: false
        type: boolean
      translation_checker:
        description: "True if need run translation checker"
        default: false
        required: false
        type: boolean
      registry_id:
        description: "YC registry ID"
        default: "crpo9tj76o3c7pi8i72n"
        required: false
        type: string
      e2e_image:
        description: "Image name to creating e2e tests"
        default: "frontend-e2e"
        required: false
        type: string
      e2e_tag:
        description: "Image tag to creating e2e tests"
        default: ""
        required: false
        type: string
      sentry_main_enabled:
        description: "Sentry errors mindbox enabled"
        required: false
        type: boolean
      sentry_main_project:
        description: "Sentry errors mindbox project"
        required: false
        default: ""
        type: string
      sentry_autobugs_enabled:
        description: "Sentry autobugs mindbox enabled"
        required: false
        type: boolean
      sentry_autobugs_project:
        description: "Sentry autobugs mindbox project"
        required: false
        default: ""
        type: string
    secrets:
      npm_token:
        description: 'A GH_NPM_REGISTRY token passed from the caller workflow'
        required: true
      frontend_gha_full_token:
        description: 'A FRONTEND_GHA_FULL_TOKEN token passed from the caller workflow'
        required: true
      container_registry_key:
        description: 'A CONTAINER_REGISTRY_KEY token passed from the caller workflow'
        required: true
      octopus_server:
        description: 'A OCTOPUS_SERVER token passed from the caller workflow'
        required: true
      octopus_api_key:
        description: 'A OCTOPUS_API_KEY token passed from the caller workflow'
        required: true
      failure_notify_url:
        description: 'A url where to send a crash notification'
        required: false
      sentry_main_auth_token:
        description: 'Sentry errors mindbox auth token'
        required: false
      sentry_main_dsn:
        description: 'Sentry errors mindbox dsn'
        required: false
      sentry_autobugs_auth_token:
        description: 'Sentry autobugs mindbox auth token'
        required: false
      sentry_autobugs_dsn:
        description: 'Sentry autobugs mindbox dsn'
        required: false

jobs:
  checking:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:

      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.JS
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
          registry-url: "https://npm.pkg.github.com/mindbox-moscow"

      - name: Install deps
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: npm-ci-${{ github.sha }}

      - name: Run graphql-codegen
        if: ${{ inputs.graphql_codegen }}
        run: npm run graphql-codegen

      - name: Run typechecking
        if: ${{ inputs.typechecking }}
        run: npm run check-types

      - name: Run linters
        if: ${{ inputs.linters }}
        run: npm run check-scripts

      - name: Run style linters
        if: ${{ inputs.style_linters }}
        run: npm run check-styles

      - name: Run tests
        if: ${{ inputs.tests }}
        run: npm run test

      - name: Run translation checker
        if: ${{ inputs.translation_checker }}
        uses: mindbox-moscow/TranslationChecker@master
        with:
          skip-inclusion-check: "--skipInclusionCheck"

  release:
    needs: checking
    concurrency: release
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}
    timeout-minutes: 15
    env:
      registry: cr.yandex/${{ inputs.registry_id }}
      e2e-image: ${{ inputs.e2e_image }}
      e2e-tag: ${{ inputs.e2e_tag }}
      sentry_main_url: https://errors.mindbox.ru
      sentry_autobugs_url: https://autobugs.mindbox.ru
      sentry_main_org: mindbox
      sentry_autobugs_org: mindbox

    steps:

      - name: Set variables
        id: set_variables
        run: |
          echo "##[set-output name=repository_name;]$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}')"

      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set project path
        run: |
          if [[ $REPOSITORY == "frontend-core-v2" ]]; then
            echo "octopus_project_name=CoreFrontend" >> $GITHUB_ENV
          else
            echo "octopus_project_name=$REPOSITORY" >> $GITHUB_ENV
          fi
        env:
          REPOSITORY: ${{ steps.set_variables.outputs.repository_name }}

      - name: generate release number
        id: release-number
        uses: mindbox-moscow/gha-release-number@v1.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.JS
        uses: actions/setup-node@v1
        with:
          always-auth: true
          node-version: "12.x"
          registry-url: "https://npm.pkg.github.com/mindbox-moscow"

      - name: Install deps
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}

      - name: Disable Lefthook
        run: echo "LEFTHOOK=0" >> $GITHUB_ENV

      - name: Build and format npm-package
        run: npm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.npm_token }}
          SENTRY_MAIN_AUTH_TOKEN: ${{ secrets.sentry_main_auth_token }}
          SENTRY_MAIN_DSN: ${{ secrets.sentry_main_dsn }}
          SENTRY_MAIN_ENABLED: ${{ inputs.sentry_main_enabled }}
          SENTRY_MAIN_ORG: ${{ env.sentry_main_org }}
          SENTRY_MAIN_PROJECT: ${{ inputs.sentry_main_project }}
          SENTRY_MAIN_URL: ${{ env.sentry_main_url }}
          SENTRY_MAIN_RELEASE: ${{ steps.release-number.outputs.release-number }} (${{ github.sha }})
          SENTRY_AUTOBUGS_AUTH_TOKEN: ${{ secrets.sentry_autobugs_auth_token }}
          SENTRY_AUTOBUGS_DSN: ${{ secrets.sentry_autobugs_dsn }}
          SENTRY_AUTOBUGS_ENABLED: ${{ inputs.sentry_autobugs_enabled }}
          SENTRY_AUTOBUGS_ORG: ${{ env.sentry_autobugs_org }}
          SENTRY_AUTOBUGS_PROJECT: ${{ inputs.sentry_autobugs_project }}
          SENTRY_AUTOBUGS_URL: ${{ env.sentry_autobugs_url }}
          SENTRY_AUTOBUGS_RELEASE: ${{ steps.release-number.outputs.release-number }} (${{ github.sha }})

      - name: Set version
        id: package_version
        uses: KageKirin/set-node-package-version@v0
        with:
          version: ${{ steps.release-number.outputs.release-number }}

      - name: Copy package.json to build folder
        run: cp ./package.json ./build/

      - name: Install YC
        run: |
          sudo curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          sudo ln -s /home/runner/yandex-cloud/bin/yc /bin/yc

      - name: Create e2e tests list
        run: |
          yc config profile create frontend-ci
          echo '${{ secrets.container_registry_key }}' >> iam_key.json | yc config set service-account-key iam_key.json
          rm iam_key.json
          curl -s -H "Authorization: Bearer $(yc iam create-token)" $URL?repositoryName=${{ inputs.registry_id }}/frontend-e2e | jq -r ".images[].tags[]" | sed 's/-latest//g'  > ./build/e2e_tests.txt
        env:
          URL: "https://container-registry.api.cloud.yandex.net/container-registry/v1/images"

      - name: Create artifact
        run: zip -r ${{ env.octopus_project_name }}.${{ steps.release-number.outputs.release-number }}.zip ./build

      - name: Install e2e deps
        if: ${{ inputs.e2e_tag }}
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}
        working-directory: ./e2e

      - name: Download e2e tests Dockerfile
        if: ${{ inputs.e2e_tag }}
        run: |
          wget --header 'Authorization: token ${{ secrets.frontend_gha_full_token }}' https://raw.githubusercontent.com/mindbox-moscow/frontend-cypress/master/docker/Dockerfile
        working-directory: ./e2e

      - name: Remove old e2e image
        if: ${{ inputs.e2e_tag }}
        run: |
          imageId=$(curl -H "Authorization: Bearer $(yc iam create-token)" $URL?repositoryName=${{ inputs.registry_id }}/frontend-e2e | jq -r '.images[] | select(.tags[]? == "${{ env.e2e-tag }}") | .id')
          curl -X DELETE -H "Authorization: Bearer $(yc iam create-token)" $URL/$imageId
        env:
          URL: "https://container-registry.api.cloud.yandex.net/container-registry/v1/images"

      - name: Build e2e docker images
        if: ${{ inputs.e2e_tag }}
        run: docker build . -t ${{ env.registry }}/${{ env.e2e-image }}:${{ env.e2e-tag }}
        working-directory: ./e2e

      - name: Authenticate in yandex registry
        if: ${{ inputs.e2e_tag }}
        run: echo '${{ secrets.container_registry_key }}' | docker login -u json_key --password-stdin cr.yandex

      - name: Push e2e docker image to registry
        if: ${{ inputs.e2e_tag }}
        run: |
          docker push ${{ env.registry }}/${{ env.e2e-image }}:${{ env.e2e-tag }}

      - name: Create Release
        id: create_release
        uses: mindbox-moscow/github-actions/create-github-release@master
        with:
          release-number: ${{ steps.release-number.outputs.release-number }}
          checkout: false

      - name: Git Identity
        run: |
          git config --global user.name 'service-github-push-front'
          git config --global user.email 'service_github_push_front@mindbox.ru'
        env:
          GITHUB_TOKEN: ${{ secrets.FRONTEND_GHA_FULL_TOKEN }}

      - name: commit new version
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: upd release version [ci skip]
          commit_options: '--no-verify'

      - name: Push package to Octopus repository
        uses: docker://octopusdeploy/octo
        with:
          args: >
            push
            --package="./${{ env.octopus_project_name }}.${{ steps.release-number.outputs.release-number }}.zip"
            --server ${{ secrets.octopus_server }}
            --apikey ${{ secrets.octopus_api_key }}

      - name: "Create Octopus Release"
        uses: docker://octopusdeploy/octo
        with:
          args: >
            create-release
            --server ${{ secrets.octopus_server }}
            --project "${{ env.octopus_project_name }}"
            --version ${{ steps.release-number.outputs.release-number }}
            --channel Default
            --tenant=*
            --apikey ${{ secrets.octopus_api_key }}
            --releasenotes "${{ steps.create-release.outputs.release-notes-body }}"

      - name: Amixr notification if failure
        uses: joelwmale/webhook-action@master
        if: ${{ failure() }}
        with:
          url: ${{ secrets.failure_notify_url }}
          body: '{"title": "Build ${{ github.repository }} *failed*", "state": "alerting", "message": "Check logs at\nhttps://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\nAutor: ${{ github.actor }}"}'
