name: CI

on:
  workflow_call:
    inputs:
      node_version:
        description: "Node.js version"
        default: "18.18.2"
        required: false
        type: string
      checking_timeout_minutes:
        description: "checking timeout minutes"
        default: 15
        required: false
        type: number
      release_timeout_minutes:
        description: "release timeout minutes"
        default: 25
        required: false
        type: number
      typechecking:
        description: "True if need to run check-types"
        default: false
        required: false
        type: boolean
      graphql_codegen:
        description: "True if need to run graphql-codegen"
        default: false
        required: false
        type: boolean
      linters:
        description: "True if need run check-scripts"
        default: false
        required: false
        type: boolean
      style_linters:
        description: "True if need run check-styles"
        default: false
        required: false
        type: boolean
      tests:
        description: "True if need run tests"
        default: false
        required: false
        type: boolean
      component_tests:
        description: "True if need run component tests"
        default: false
        required: false
        type: boolean
      e2e_typechecking:
        description: "True if need to run check-types for E2E"
        default: false
        required: false
        type: boolean
      e2e_linters:
        description: "True if need to run check-scripts for E2E"
        default: false
        required: false
        type: boolean
      registry_id:
        description: "YC registry ID"
        default: "crpo9tj76o3c7pi8i72n"
        required: false
        type: string
      e2e_image:
        description: "Image name to creating e2e tests"
        default: "frontend-e2e"
        required: false
        type: string
      e2e_tag:
        description: "Image tag to creating e2e tests"
        default: ""
        required: false
        type: string
      e2e_tag_playwright:
        description: "Image tag to creating e2e tests via playwright"
        default: ""
        required: false
        type: string
      commit_release_version:
        type: boolean
        description: "True if need to commit release version to package.json"
        required: false
        default: false
      use_k8_deploy_process:
        type: boolean
        description: "True if need to use new deployment procedure"
        required: false
        default: false
      template_repo:
        description: "True if runs on template repository"
        default: false
        required: false
        type: boolean
      runs_on:
        description: "What runners to use"
        default: '"ubuntu-latest"'
        required: false
        type: string
    secrets:
      gh_npm_registry:
        description: "A GH_NPM_REGISTRY token passed from the caller workflow"
        required: true
      frontend_gha_full_token:
        description: "A FRONTEND_GHA_FULL_TOKEN token passed from the caller workflow"
        required: true
      container_registry_key:
        description: "A CONTAINER_REGISTRY_KEY token passed from the caller workflow"
        required: true
      octopus_server:
        description: "A OCTOPUS_SERVER token passed from the caller workflow"
        required: true
      octopus_api_key:
        description: "A OCTOPUS_API_KEY token passed from the caller workflow"
        required: true
      frontend_webhook_to_amixr:
        description: "A url where to send a crash notification"
        required: false
      pipelines_release_submit_token:
        description: "Pipeline metrics auth token"
        required: false

env:
  # temporarily increase Node.js memory limits to support double-builds
  # more info: https://tracker.yandex.ru/FRONTEND-4
  # TODO remove when fully migrated to Module Federation 2
  NODE_OPTIONS: --max_old_space_size=4096

jobs:
  checking:
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    timeout-minutes: ${{ inputs.checking_timeout_minutes }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run translation checker
        if: ${{ !inputs.template_repo }}
        uses: mindbox-cloud/github-actions/localization/translation-checker@master
        with:
          skipInclusionCheck: true

      - name: Setup Node.JS
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          registry-url: "https://npm.pkg.github.com/mindbox-cloud"

      - name: Clean cache
        run: npm cache clean -f

      - name: Install deps
        run: npm ci --loglevel verbose
        env:
          NODE_AUTH_TOKEN: ${{ secrets.gh_npm_registry }}

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ./node_modules
          key: npm-ci-${{ github.sha }}

      - name: Run graphql-codegen
        if: ${{ inputs.graphql_codegen }}
        run: npm run graphql-codegen

      - name: Run typechecking
        if: ${{ inputs.typechecking }}
        run: npm run check-types

      - name: Run linters
        if: ${{ inputs.linters }}
        run: npm run check-scripts

      - name: Run style linters
        if: ${{ inputs.style_linters }}
        run: npm run check-styles -- --allow-empty-input

      - name: Run tests
        if: ${{ inputs.tests }}
        run: npm run test -- --maxConcurrency=1 --maxWorkers=1

      - name: Run component tests
        if: ${{ inputs.component_tests }}
        run: npm run component-testing

      - name: Install E2E deps
        if: ${{ inputs.e2e_typechecking || inputs.e2e_linters }}
        run: npm ci --loglevel verbose
        env:
          NODE_AUTH_TOKEN: ${{ secrets.gh_npm_registry }}
        working-directory: ./e2e

      - name: Cache E2E node modules
        if: ${{ inputs.e2e_typechecking || inputs.e2e_linters }}
        uses: actions/cache@v4
        with:
          path: ./e2e/node_modules
          key: e2e-npm-ci-${{ github.sha }}

      - name: Run E2E typechecking
        if: ${{ inputs.e2e_typechecking }}
        run: npm run e2e:check-types
        working-directory: ./e2e

      - name: Run E2E linters
        if: ${{ inputs.e2e_linters }}
        run: npm run e2e:check-scripts
        working-directory: ./e2e
  
  autoapprove:
    needs: checking
    runs-on: ubuntu-latest
    if: ${{ always() && !cancelled() && contains(github.head_ref, 'LocalizationPull') }}
    steps:
      - uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.FRONTED_APPROVING_KEY }}

  release:
    needs: checking
    concurrency: release
    runs-on: gh-large-16c-ubuntu-latest
    if: ${{ !inputs.template_repo && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') }}
    timeout-minutes: ${{ inputs.release_timeout_minutes }}
    env:
      registry: cr.yandex/${{ inputs.registry_id }}
      e2e-image: ${{ inputs.e2e_image }}
      e2e-tag: ${{ inputs.e2e_tag }}
      OCTOPUS_URL: ${{ secrets.OCTOPUS_SERVER }}
      OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
      OCTOPUS_SPACE: Default

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.FRONTEND_GHA_FULL_TOKEN }}

      - name: Set project path
        run: |
          if [[ $REPOSITORY == "frontend-core-v2" ]]; then
            echo "octopus_project_name=CoreFrontend" >> $GITHUB_ENV
            echo "project_name=core" >> $GITHUB_ENV
          else
            echo "octopus_project_name=$REPOSITORY" >> $GITHUB_ENV
            echo "project_name=$REPOSITORY" >> $GITHUB_ENV
          fi
        env:
          REPOSITORY: ${{ github.event.repository.name }}

      - name: Generate release number
        id: release-number
        uses: mindbox-cloud/gha-release-number@v1.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.JS
        uses: actions/setup-node@v4
        with:
          always-auth: true
          node-version: ${{ inputs.node_version }}
          registry-url: "https://npm.pkg.github.com/mindbox-cloud"

      - name: Cache node modules
        uses: actions/cache@v4
        id: cache_node_modules
        with:
          path: ./node_modules
          key: npm-ci-${{ github.sha }}

      - name: Install deps
        if: ${{ !steps.cache_node_modules.outputs.cache-hit }}
        # Also skip running the "preinstall" script so that the NodeJS/NPM version is not checked
        # https://mindbox.slack.com/archives/C04K3M61927/p1681285735640879
        run: npm ci --loglevel verbose --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.gh_npm_registry }}

      - name: Set new version
        id: package_version
        uses: KageKirin/set-node-package-version@v0
        with:
          version: ${{ steps.release-number.outputs.release-number }}

      - name: Disable Lefthook
        run: echo "LEFTHOOK=0" >> $GITHUB_ENV

      - name: Install YC
        run: |
          sudo curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          sudo ln -s /home/runner/yandex-cloud/bin/yc /bin/yc

      - name: Create yc profile
        run: |
          yc config profile create frontend-ci
          echo '${{ secrets.container_registry_key }}' >> iam_key.json | yc config set service-account-key iam_key.json
          rm iam_key.json

      # ---------------- start use_k8_deploy_process ---------------------

      - name: Authenticate in yandex registry
        if: ${{ inputs.e2e_tag }} || ${{ inputs.use_k8_deploy_process }}
        run: echo '${{ secrets.container_registry_key }}' | docker login -u json_key --password-stdin cr.yandex

      - name: Build and format npm-package for new deploy
        if: ${{ inputs.use_k8_deploy_process }}
        run: npm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.gh_npm_registry }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_NPM_REGISTRY: ${{ secrets.gh_npm_registry }}

      - name: Upload statoscope artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.project_name }}-master-stats
          if-no-files-found: warn
          path: |
            ./stats

      - name: Create e2e tests list for k8
        if: ${{ inputs.use_k8_deploy_process }}
        run: |
          curl -s -H "Authorization: Bearer $(yc iam create-token)" $URL?repositoryName=${{ inputs.registry_id }}/frontend-e2e | jq -r ".images[] | (.tags // []) | .[]" | sed 's/-latest//g'  > ./build/e2e_tests.txt
        env:
          URL: "https://container-registry.api.cloud.yandex.net/container-registry/v1/images"

      - name: Download release Dockerfile
        if: ${{ inputs.use_k8_deploy_process }}
        run: |
          wget --header 'Authorization: token ${{ secrets.frontend_gha_full_token }}' https://raw.githubusercontent.com/mindbox-cloud/frontend-deploy/master/mcf-release/Dockerfile
          wget --header 'Authorization: token ${{ secrets.frontend_gha_full_token }}' https://raw.githubusercontent.com/mindbox-cloud/frontend-deploy/master/mcf-release/nginx.conf
          wget --header 'Authorization: token ${{ secrets.frontend_gha_full_token }}' https://raw.githubusercontent.com/mindbox-cloud/frontend-deploy/master/mcf-release/current.conf
          wget --header 'Authorization: token ${{ secrets.frontend_gha_full_token }}' https://raw.githubusercontent.com/mindbox-cloud/frontend-deploy/master/mcf-release/source.conf.template
        working-directory: ./build

      - name: Build release docker image
        if: ${{ inputs.use_k8_deploy_process }}
        run: docker build . -t ${{ env.registry }}/${{ env.project_name }}:${{ steps.release-number.outputs.release-number }} -t ${{ env.registry }}/${{ env.project_name }}:latest
        working-directory: ./build

      - name: Push release docker image to registry with retry
        if: ${{ inputs.use_k8_deploy_process }}
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 60
          retry_wait_seconds: 1
          max_attempts: 3
          shell: bash
          command: docker push ${{ env.registry }}/${{ env.project_name }} --all-tags

      # ------------------------- use_k8_deploy_process ------------------

      - name: Install e2e deps
        if: ${{ inputs.e2e_tag }}
        # Also skip running the "preinstall" script so that the NodeJS/NPM version is not checked
        # https://mindbox.slack.com/archives/C04K3M61927/p1681285735640879
        run: npm ci --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.gh_npm_registry }}
        working-directory: ./e2e

      - name: Authenticate in yandex registry
        run: echo '${{ secrets.CONTAINER_REGISTRY_KEY }}' | docker login -u json_key --password-stdin cr.yandex

      - name: Download e2e tests Dockerfile
        if: ${{ inputs.e2e_tag }}
        run: |
          wget --header 'Authorization: token ${{ secrets.frontend_gha_full_token }}' https://raw.githubusercontent.com/mindbox-cloud/frontend-cypress/master/docker/Dockerfile
        working-directory: ./e2e

      - name: Build e2e docker image
        if: ${{ inputs.e2e_tag }}
        run: docker build . -t ${{ env.registry }}/${{ env.e2e-image }}:${{ env.e2e-tag }}
        working-directory: ./e2e

      - name: Push e2e docker image to registry with retry
        if: ${{ inputs.e2e_tag }}
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 180
          retry_wait_seconds: 1
          max_attempts: 3
          shell: bash
          command: docker push ${{ env.registry }}/${{ env.e2e-image }}:${{ env.e2e-tag }}

      - name: Build e2e playwright docker image
        if: ${{ inputs.e2e_tag_playwright }}
        run: docker build . -t ${{ env.registry }}/${{ env.e2e-image }}:${{ inputs.e2e_tag_playwright }} --build-arg NODE_AUTH_TOKEN=${{ secrets.gh_npm_registry }}
        working-directory: ./playwright

      - name: Push e2e playwright docker image to registry with retry
        if: ${{ inputs.e2e_tag_playwright }}
        uses: nick-fields/retry@v2
        with:
          timeout_seconds: 180
          retry_wait_seconds: 1
          max_attempts: 3
          shell: bash
          command: docker push ${{ env.registry }}/${{ env.e2e-image }}:${{ inputs.e2e_tag_playwright }}

      - name: Post release to pipelines
        run: |
          if [ "${{ secrets.pipelines_release_submit_token }}" != "" ]; then
          curl --fail --location --request POST 'https://pipelines-services.mindbox.ru/releases/submit-data' \
            --header 'Authorization: Bearer ${{secrets.pipelines_release_submit_token}}' \
            --header 'Content-Type: application/json' \
            --data-raw '{
              "serviceName": "${{ github.event.repository.name }}",
              "version": "${{ steps.release-number.outputs.release-number }}",
              "runId": "${{ github.run_id }}"
              }'
          fi
        shell: bash

      - name: Create Release
        id: create-release
        uses: mindbox-cloud/github-actions/create-github-release@master
        with:
          release-number: ${{ steps.release-number.outputs.release-number }}
          checkout: false

      - name: Git Identity
        run: |
          git config --global user.name 'service-github-push-front'
          git config --global user.email 'service_github_push_front@mindbox.ru'
        env:
          GITHUB_TOKEN: ${{ secrets.FRONTEND_GHA_FULL_TOKEN }}

      - name: Commit new version
        if: ${{ inputs.commit_release_version }}
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          file_pattern: package.json
          commit_message: "chore: upd release version ${{ steps.release-number.outputs.release-number }} [ci skip]"
          commit_options: "--no-verify"

      - name: Create Octopus package
        uses: OctopusDeploy/create-zip-package-action@v3
        with:
          package_id: ${{ github.event.repository.name }}
          version: ${{ steps.release-number.outputs.release-number }}
          output_folder: './packages/'
          base_path: '.'
          files: |
            build/**/*.*

      - name: Upload Octopus package
        uses: OctopusDeploy/push-package-action@v3
        with:
          packages: |
            packages/**/*.zip

      - name: Create Octopus release
        uses: OctopusDeploy/create-release-action@v3
        with:
          channel: Default
          project: ${{ github.event.repository.name }}-k8-deploy
          release_number: ${{ steps.release-number.outputs.release-number }}
          release_notes: ${{ steps.create-release.outputs.release-notes-body }}
          package_version: ${{ steps.release-number.outputs.release-number }}
          git_ref: master
          packages: |
            ${{ github.event.repository.name }}:${{ steps.release-number.outputs.release-number }}