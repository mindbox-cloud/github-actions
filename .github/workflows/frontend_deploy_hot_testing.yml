name: Deploy Hot-testing container

on:
  workflow_call:
    inputs:
      registry_id:
        description: "YC registry ID"
        default: "crpo9tj76o3c7pi8i72n"
        required: false
        type: string
      image_name:
        description: "Hot-testing image name"
        default: "dev_new_frontend"
        required: false
        type: string
      base_project_url:
        type: string
        description: "The project which will be used for downloading all static"
        required: false
        default: test-staging.mindbox.ru
      target_port:
        type: number
        description: "The port for k8 services"
        required: false
        default: 8080
    secrets:
      frontend_gha_full_token:
        description: "A FRONTEND_GHA_FULL_TOKEN token passed from the caller workflow"
        required: true
      kube_dev_config_k8:
        description: "A SA_TOKEN_DTLN_KUBE_CDP_STAGING_MICROFRONTENDS token passed from the caller workflow for new deploy"
        required: false
      slack_webhook_url:
        description: "A FRONTEND_PIPELINE_SLACK_WEBHOOK_URL token passed from the caller workflow"
        required: false
      kube_token:
        description: "A SA_TOKEN_RU_STAGING_YC_KUBE_CDP_MIXED1_MICROFRONTENDS token passed from the caller workflow for deploy"
        required: true
    outputs:
      hot_testing_url:
        description: "Hot-testing url"
        value: ${{ jobs.hot_testing.outputs.hot_testing_url }}

jobs:
  hot_testing:
    runs-on: ubuntu-latest
    outputs:
      hot_testing_url: ${{ steps.set_output.outputs.hot_testing_url }}
    timeout-minutes: 20
    if: ${{ !contains(github.head_ref, 'LocalizationPull') && github.event.pull_request.user.login != 'renovate[bot]' }}
    env:
      registry: cr.yandex/${{ inputs.registry_id }}
      image: ${{ inputs.image_name }}

    steps:
      - name: View PR author
        run: echo "This PR is opened by ${{ github.event.pull_request.user.login }} ."

      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set variables
        run: |
          echo "ref_name=$(echo $GITHUB_HEAD_REF | tr '[A-Z]' '[a-z]')" >> $GITHUB_ENV
          echo "repository_name=$(cat $GITHUB_EVENT_PATH | jq '.repository.name' | sed 's/\"//g')" >> $GITHUB_ENV
        id: set_variables

      - name: Get branch and repo names hash
        run: echo "hash_payload=$(echo $BRANCH_AND_REPO | md5sum | sed 's/  -//g')"  >> $GITHUB_ENV
        id: branch_and_repo_hash
        env:
          BRANCH_AND_REPO: "${{ env.repository_name }} ${{ env.ref_name }}"

      - name: Set project path
        run: |
          project_name=$(cat ./package.json | jq .name | sed -s 's/@mindbox-cloud\///g' | sed -s 's/-/_/g' | sed -s 's/"//g')
          if [[ $project_name == "frontend_core_v2" ]]; then
            echo "project_folder=core" >> $GITHUB_ENV
            echo "frontend_core_service=hot-testing-${{ env.hash_payload }}" >> $GITHUB_ENV
          else
            echo "project_folder=$project_name" >> $GITHUB_ENV
            echo "frontend_core_service=core-service-staging" >> $GITHUB_ENV
          fi
        id: set_project

      - name: Checkout frontend-deploy repository
        uses: actions/checkout@v4
        with:
          repository: mindbox-cloud/frontend-deploy
          token: ${{ secrets.frontend_gha_full_token }}
          path: ./deploy
          ref: fix-less-requests

      - name: Select core deploy.yml
        if: ${{ env.repository_name == 'frontend-core-v2' }}
        run: mv ./deploy/hot-testing/kubernetes/deploy-k8-core.yml ./deploy/hot-testing/kubernetes/deploy-k8.yml

      - name: Select micro deploy.yml
        if: ${{ env.repository_name != 'frontend-core-v2' }}
        run: mv ./deploy/hot-testing/kubernetes/deploy-k8-micro.yml ./deploy/hot-testing/kubernetes/deploy-k8.yml

      - name: Set variables in deployment.yaml
        working-directory: ./deploy/hot-testing/kubernetes
        run: |
          sed -i "s~DOCKER_IMAGE~$DOCKER_IMAGE~g" ./deploy-k8.yml
          sed -i "s~HASH_PAYLOAD~$HASH_PAYLOAD~g" ./deploy-k8.yml
          sed -i "s~CI_COMMIT_SHA~$CI_COMMIT_SHA~g" ./deploy-k8.yml
          sed -i "s~BASE_PROJECT_URL~$BASE_PROJECT_URL~g" ./deploy-k8.yml
          sed -i "s~PROJECT_FOLDER~$PROJECT_FOLDER~g" ./deploy-k8.yml
          sed -i "s~TARGET_PORT~$TARGET_PORT~g" ./deploy-k8.yml
          sed -i "s~FRONTEND_CORE_SERVICE_NAME~$FRONTEND_CORE_SERVICE_NAME~g" ./deploy-k8.yml
          sed -i "s~MKF_NAMESPACE~$MKF_NAMESPACE~g" ./deploy-k8.yml
        env:
          DOCKER_IMAGE: ${{ env.registry }}/${{ env.image }}-k8/${{ env.ref_name }}:${{ github.sha }}
          HASH_PAYLOAD: ${{ env.hash_payload }}
          CI_COMMIT_SHA: ${{ github.sha }}
          BASE_PROJECT_URL: ${{ inputs.base_project_url }}
          PROJECT_FOLDER: ${{ env.project_folder }}
          TARGET_PORT: ${{ inputs.target_port }}
          FRONTEND_CORE_SERVICE_NAME: ${{ env.frontend_core_service }}
          MKF_NAMESPACE: ${{ env.mcf_namespace }}
      
      - name: Setup kubeconfig.yaml
        working-directory: ./deploy/testing-common
        run: |
          sed -i "s~TOKEN~$TOKEN~g" ./kubeconfig.yaml
          kubeconfig_encoded=$(base64 -w 0 ./kubeconfig.yaml)
          echo "KUBECONFIG_ENCODED=$kubeconfig_encoded" >> $GITHUB_ENV
        shell: bash
        env:
          TOKEN: ${{ secrets.kube_token }}

      - name: Deploy to cluster
        uses: actions-hub/kubectl@v1.31.0
        env:
          KUBE_CONFIG: ${{ env.KUBECONFIG_ENCODED }}
        with:
          args: apply -f ./deploy/hot-testing/kubernetes/deploy-k8.yml

      - name: Check dns record creation
        id: check_dns
        uses: nick-fields/retry@v3
        with:
          timeout_seconds: 15
          shell: bash
          max_attempts: 90
          retry_wait_seconds: 10
          command: |
            dig @8.8.8.8 -t cname +short hot-testing-${{ env.hash_payload }}-staging.mindbox.ru. | grep -q "ru-staging-yc-kube-cdp-mixed1-services.mindbox.ru." || \
            exit 1
        continue-on-error: true

      - name: Fail with error message
        if: ${{ steps.check_dns.outcome == 'failure' }}
        run: |
          echo "The DNS CNAME record for 'hot-testing-${{ env.hash_payload }}-staging.mindbox.ru' was not created as expected."
          exit 1

      - name: Set output
        id: set_output
        run: echo "hot_testing_url=https://hot-testing-${{ env.hash_payload }}-staging.mindbox.ru" >> $GITHUB_OUTPUT

      - name: Add comment to commit if the job has completed
        uses: mshick/add-pr-comment@v2
        with:
          message: ":heavy_check_mark: You can check your **Frontend** changes at\nhttps://hot-testing-${{ env.hash_payload }}-staging.mindbox.ru"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add comment to commit if the job has failed
        if: ${{ failure() }}
        uses: mshick/add-pr-comment@v2
        with:
          message: ":negative_squared_cross_mark: Your **Frontend** deploy failed. Check logs at\nhttps://github.com/mindbox-cloud/${{ env.repository_name }}/actions/runs/${{ github.run_id }}"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
