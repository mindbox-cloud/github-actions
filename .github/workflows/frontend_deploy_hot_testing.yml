name: Deploy Hot-testing container

on:
  workflow_call:
    inputs:
      node_version:
        description: "Node.js version"
        default: "14.x"
        required: false
        type: string
      registry_id:
        description: "YC registry ID"
        default: "crpo9tj76o3c7pi8i72n"
        required: false
        type: string
      image_name:
        description: "Hot-testing image name"
        default: "dev_new_frontend"
        required: false
        type: string
      template_bucket:
        description: "Bucket with actual statics"
        default: "mindbox-newfrontend-templates"
        required: false
        type: string
      template_folder:
        description: "Folder in bucket with actual statics"
        default: "microapps"
        required: false
        type: string
      use_k8_deploy_process:
        type: boolean
        description: "True if need to use new deployment procedure"
        required: false
        default: true
      base_project_url:
        type: string
        description: "The project which will be used for downloading all static"
        required: false
        default: test-staging.mindbox.ru
      target_port:
        type: number
        description: "The port for k8 services"
        required: false
        default: 8080
    secrets:
      npm_token:
        description: 'A GH_NPM_REGISTRY token passed from the caller workflow'
        required: true
      frontend_gha_full_token:
        description: 'A FRONTEND_GHA_FULL_TOKEN token passed from the caller workflow'
        required: true
      kube_dev_config:
        description: 'A DEV_FRONTEND_GHA_KUBE_CONFIG_DATA token passed from the caller workflow'
        required: true
      kube_dev_config_k8:
        description: 'A SA_TOKEN_DTLN_KUBE_CDP_STAGING_MICROFRONTENDS token passed from the caller workflow for new deploy'
        required: false
      container_registry_key:
        description: 'A CONTAINER_REGISTRY_KEY token passed from the caller workflow'
        required: true
      slack_webhook_url:
        description: 'A FRONTEND_PIPELINE_SLACK_WEBHOOK_URL token passed from the caller workflow'
        required: true
      bucket_access_id:
        description: 'A NEW_FRONTEND_STAGING_TEMPLATE_BUCKET_KEY_ID token passed from the caller workflow'
        required: true
      bucket_access_key:
        description: 'A NEW_FRONTEND_STAGING_TEMPLATE_BUCKET_ACCESS_KEY token passed from the caller workflow'
        required: true

jobs:
  hot-testing:
    runs-on: [self-hosted, Linux, frontend]
    timeout-minutes: 10
    if: ${{ !contains(github.head_ref, 'LocalizationPull') && github.event.pull_request.user.login != 'renovate[bot]' }}
    env:
      registry: cr.yandex/${{ inputs.registry_id }}
      image: ${{ inputs.image_name }}
      template_bucket: ${{ inputs.template_bucket }}
      template_folder: ${{ inputs.template_folder }}

    steps:
      - name: View PR author
        run: echo "This PR is opened by ${{ github.event.pull_request.user.login }} ."

      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set variables
        run: |
          echo "ref_name=$(echo $GITHUB_HEAD_REF | tr '[A-Z]' '[a-z]')" >> $GITHUB_ENV
          echo "repository_name=$(cat $GITHUB_EVENT_PATH | jq '.repository.name' | sed 's/\"//g')" >> $GITHUB_ENV
        id: set_variables

      - name: Get branch and repo names hash
        run: echo "hash_payload=$(echo $BRANCH_AND_REPO | md5sum | sed 's/  -//g')"  >> $GITHUB_ENV
        id: branch_and_repo_hash
        env:
          BRANCH_AND_REPO: "${{ env.repository_name }} ${{ env.ref_name }}"

      - name: Set project path
        run: |
          project_name=$(cat ./package.json | jq .name | sed -s 's/@mindbox-cloud\///g' | sed -s 's/-/_/g' | sed -s 's/"//g')
          if [[ $project_name == "frontend_core_v2" ]]; then
            echo "project_folder=core" >> $GITHUB_ENV
            echo "frontend_core_service=hot-testing-service-${{ env.hash_payload }}" >> $GITHUB_ENV
          else
            echo "project_folder=$project_name" >> $GITHUB_ENV
            echo "frontend_core_service=core-service-staging" >> $GITHUB_ENV
          fi
        id: set_project

      - name: Setup Node.JS
        uses: actions/setup-node@v1
        with:
          always-auth: true
          node-version: ${{ inputs.node_version }}
          registry-url: "https://npm.pkg.github.com/mindbox-cloud"

      - name: Get node modules from cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: npm-ci-${{ github.sha }}

      - name: Disable Lefthook
        run: echo "LEFTHOOK=0" >> $GITHUB_ENV

      - name: Authenticate in yandex registry
        run: echo '${{ secrets.container_registry_key }}' | docker login -u json_key --password-stdin cr.yandex

# ---------------------- use_k8_deploy_process -------------------

      - name: Checkout frontend-deploy repository
        if: ${{ inputs.use_k8_deploy_process }}
        uses: actions/checkout@v2
        with:
          repository: mindbox-cloud/frontend-deploy
          token: ${{ secrets.frontend_gha_full_token }}
          path: ./deploy

      - name: Build and format npm-package for new deploy
        if: ${{ inputs.use_k8_deploy_process }}
        run: npm run build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.npm_token }}
          MCF_STATIC_FOLDER: v2_static

      # needed for frontend discovery(build initial.js)
      - name: copy remoteEntry to v2_static folder
        if: ${{ inputs.use_k8_deploy_process }}
        run: |
          find . -type f -name "remoteEntry.js" -exec cp {} ./v2_static/ \;
        working-directory: ./build

      - name: Copy Dockerfile to build folder
        if: ${{ inputs.use_k8_deploy_process }}
        run: | 
          cp ./deploy/mcf-release/Dockerfile ./build
          cp ./deploy/mcf-release/nginx.conf ./build

      - name: Build docker image
        if: ${{ inputs.use_k8_deploy_process }}
        working-directory: ./build
        run: |
          docker build . -t ${{ env.registry }}/${{ env.image }}-k8/${{ env.ref_name }}:${{ github.sha }}

      - name: Push docker image
        if: ${{ inputs.use_k8_deploy_process }}
        run: docker push ${{ env.registry }}/${{ env.image }}-k8/${{ env.ref_name }}:${{ github.sha }}

      - name: Set variables in deployment.yaml
        if: ${{ inputs.use_k8_deploy_process }}
        working-directory: ./deploy/hot-testing/kubernetes
        run: |
          sed -i "s~DOCKER_IMAGE~$DOCKER_IMAGE~g" ./deploy-k8.yml
          sed -i "s~HASH_PAYLOAD~$HASH_PAYLOAD~g" ./deploy-k8.yml
          sed -i "s~CI_COMMIT_SHA~$CI_COMMIT_SHA~g" ./deploy-k8.yml
          sed -i "s~BASE_PROJECT_URL~$BASE_PROJECT_URL~g" ./deploy-k8.yml
          sed -i "s~PROJECT_FOLDER~$PROJECT_FOLDER~g" ./deploy-k8.yml
          sed -i "s~TARGET_PORT~$TARGET_PORT~g" ./deploy-k8.yml
          sed -i "s~FRONTEND_CORE_SERVICE_NAME~$FRONTEND_CORE_SERVICE_NAME~g" ./deploy-k8.yml
        env:
          DOCKER_IMAGE: ${{ env.registry }}/${{ env.image }}-k8/${{ env.ref_name }}:${{ github.sha }}
          HASH_PAYLOAD: ${{ env.hash_payload }}
          CI_COMMIT_SHA: ${{ github.sha }}
          BASE_PROJECT_URL: ${{ inputs.base_project_url }}
          PROJECT_FOLDER: ${{ env.project_folder }}
          TARGET_PORT: ${{ inputs.target_port }}
          FRONTEND_CORE_SERVICE_NAME: ${{ env.frontend_core_service }}

      - name: Deploy to cluster
        if: ${{ inputs.use_k8_deploy_process }}
        uses: wahyd4/kubectl-helm-action@master
        env:
            # Config file generated by this manual
            # https://cloud.yandex.ru/docs/managed-kubernetes/operations/create-static-conf
          KUBE_CONFIG_DATA: ${{ secrets.kube_dev_config_k8 }}
        with:
          args: kubectl apply -f ./deploy/hot-testing/kubernetes/deploy-k8.yml

# ---------------------- END use_k8_deploy_process -------------------

      - name: Slack notification if the job has completed
        uses: 8398a7/action-slack@v2
        with:
          status: custom
          payload: |
            {
              attachments: [{
                "author_name": "Author: ${{ github.actor }}",
                fallback: 'fallback',
                color: 'good',
                title: "Repository: ${{ env.repository_name }}",
              text: "You can check your *Frontend* changes at\nhttps://hot-testing-${{ env.hash_payload }}-staging.mindbox.ru\n\nand check your PR at \nhttps://github.com/mindbox-cloud/${{ env.repository_name }}/commit/${{ github.sha }}"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_url }}

      - name: Add comment to commit if the job has completed
        uses: mshick/add-pr-comment@v2
        with:
          message: ":heavy_check_mark: You can check your **Frontend** changes at\nhttps://hot-testing-${{ env.hash_payload }}-staging.mindbox.ru"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add comment to commit if the job has failed
        if: ${{ failure() }}
        uses: mshick/add-pr-comment@v2
        with:
          message: ":negative_squared_cross_mark: Your **Frontend** deploy failed. Check logs at\nhttps://github.com/mindbox-cloud/${{ env.repository_name }}/actions/runs/${{ github.run_id }}"
          repo-token: ${{ secrets.GITHUB_TOKEN }}


      - name: Slack notification if the job has failed
        if: ${{ failure() }}
        uses: 8398a7/action-slack@v2
        with:
          status: custom
          payload: |
            {
              attachments: [{
                "author_name": "Author: ${{ github.actor }}",
                color: "#FF0000",
                title: "Repository: ${{ env.repository_name }}",
              text: "Your *Frontend* deploy failed. Check logs at\nhttps://github.com/mindbox-cloud/${{ env.repository_name }}/actions/runs/${{ github.run_id }}"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_url }}
