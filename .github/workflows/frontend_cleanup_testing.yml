name: Cleanup trigger after branch deleted

on:
  workflow_call:
    inputs:
      hot_testing:
        description: "True if need to cleanup hot-testing"
        default: false
        required: false
        type: boolean
      hot_testing_k8:
        type: boolean
        description: "True if need to use new deployment procedure"
        required: false
        default: false
      e2e_testing:
        description: "True if need to cleanup e2e"
        default: false
        required: false
        type: boolean
      e2e_testing_k8:
        description: "True if need to cleanup e2e in k8"
        default: false
        required: false
        type: boolean
    secrets:
      frontend_gha_full_token:
        description: 'A FRONTEND_GHA_FULL_TOKEN token passed from the caller workflow'
        required: true
      kube_dev_config:
        description: 'A DEV_FRONTEND_GHA_KUBE_CONFIG_DATA token passed from the caller workflow'
        required: true
      container_registry_key:
        description: 'A CONTAINER_REGISTRY_KEY token passed from the caller workflow'
        required: true
      kube_dev_config_k8:
        description: 'A SA_TOKEN_RU_STAGING_YC_KUBE_CDP_MIXED1_MICROFRONTENDS token passed from the caller workflow for new deploy'
        required: false

jobs:
  cleanup:
    timeout-minutes: 10
    runs-on: ubuntu-latest

    steps:

      - name: Checkout frontend-deploy repository
        uses: actions/checkout@v3
        with:
          repository: mindbox-cloud/frontend-deploy
          token: ${{ secrets.frontend_gha_full_token }}
          path: ./hot_build

      - name: Set variables
        run: |
          echo "ref_name=$([[ ! -z "$GITHUB_HEAD_REF" ]] && (echo $GITHUB_HEAD_REF | tr '[A-Z]' '[a-z]')  || (cat $GITHUB_EVENT_PATH | jq '.ref' | sed 's/refs\/heads\///g' | sed 's/\"//g' | tr '[A-Z]' '[a-z]'))" >> $GITHUB_ENV
          echo "repository_name=$(cat $GITHUB_EVENT_PATH | jq '.repository.name' | sed 's/\"//g')" >> $GITHUB_ENV
        id: set_variables

      - name: Get branch and repo names hash
        run: echo "hash_payload=$(echo $BRANCH_AND_REPO | md5sum | sed 's/  -//g')"  >> $GITHUB_ENV
        id: branch_and_repo_hash
        env:
          BRANCH_AND_REPO: "${{ env.repository_name }} ${{ env.ref_name }}"

      - name: Install YC
        run: |
          sudo curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          sudo ln -s /home/runner/yandex-cloud/bin/yc /bin/yc

      - name: Create YC profile
        run: |
          yc config profile create cleaner
          echo '${{ secrets.container_registry_key }}' >> iam_key.json | yc config set service-account-key iam_key.json
          rm iam_key.json

# ---------------------- setup files ----------------------
      - name: Select core e2e/deploy.yml
        if: ${{ env.repository_name == 'frontend-core-v2' }}
        run: mv ./hot_build/e2e/kubernetes/deploy-k8-core.yml ./hot_build/e2e/kubernetes/deploy-k8.yml

      - name: Select micro e2e/deploy.yml
        if: ${{ env.repository_name != 'frontend-core-v2' }}
        run: mv ./hot_build/e2e/kubernetes/deploy-k8-micro.yml ./hot_build/e2e/kubernetes/deploy-k8.yml

      - name: Select core ht/deploy.yml
        if: ${{ env.repository_name == 'frontend-core-v2' }}
        run: mv ./hot_build/hot-testing/kubernetes/deploy-k8-core.yml ./hot_build/hot-testing/kubernetes/deploy-k8.yml

      - name: Select micro ht/deploy.yml
        if: ${{ env.repository_name != 'frontend-core-v2' }}
        run: mv ./hot_build/hot-testing/kubernetes/deploy-k8-micro.yml ./hot_build/hot-testing/kubernetes/deploy-k8.yml


# ---------------------- hot_testing_k8 -------------------

      - name: Set variables in hot-testing deployment.yml
        if: ${{ inputs.hot_testing_k8 || inputs.hot_testing }}
        run: sed -i "s~HASH_PAYLOAD~$HASH_PAYLOAD~g" ./kubernetes/deploy-k8.yml
        env:
          HASH_PAYLOAD: ${{ env.hash_payload }}
        working-directory: ./hot_build/hot-testing
        continue-on-error: true

      - name: Setup kubeconfig
        run: |
          kubeconfig_encoded=$(echo -n "apiVersion: v1
          kind: Config
          clusters:
          - name: teleport.mindbox.ru-ru-staging-yc-kube-cdp-mixed1
            cluster:
              server: 'https://158.160.136.227'
              certificate-authority-data: >-
                LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJME1ERXlOVEUyTURRMU1Wb1hEVE0wTURFeU1qRTJNRFExTVZvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBS2ppCi90M2J4WXROeEcrdVZxVU1MbEpXZHpxVm55bDBTbXorbUxNYUJ5cWVGQXVPU0RacnRXek1keVFjZS9OV1dWNFEKNFRWb2xvc1dtcGI5TElFamVLSDc2N1lqOGx2Mmd4Vm9KRHlod0tPUEprWWk4aUVSYk9hb0tNSmdyUzVpNG1oUQpMT0NhZWpzZjg3Wi8zbGFpb1FQUm85cVptOFlVSndRN05CUzlvdmljaXRmZUttbUpZOHB2UVVucWNVL1luVnA5CkV5cm9jSUIwS1NkVkNSQVRtck5TRno4MjYrSXdUbnJ3K3ZFeEVhc2hBVVdTMGFERGRrSUtyc0FFZmg1WlFsQmUKejFDVmlkK2hHbXlKSGFGbGlIQm1xTWRQZWJmMnBmNWJDMTFCRm9KNCtrMndpeDQwTThWK1VHUlQrZEVZbi92cQpiNldhR1ZScTM4T0lTVU1PTHhjQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZDL0lZVmlsSThpUFBrNXRuZkcvUEtEc2RoMlhNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFDZ0Z1Qk5XczZpVVNFMTZiL3ZJbzBtQnI2amlrelhuekl1blBIZVUwZXNoNXBzRStqTAp5QVpzcVBvc3Z3S1QzS3N3djBGcFhPMWFFTTI0WjNRYUJIWldMbkVYSld2YnFySmpJOUpyNnkvbTl0VGtBY01rCjg5QVlMc2lqQWYyMS81WjlZTGVjSFN1WWd6ZUZSZFlCd25NUnpUeDNUazdHR1NXRE5kekd1aEl6MzhqRGdxL2IKLzcySTlEQ1hLTks2WUViOTJsT3JVRDBaM3ZTZUJSeHdNWlZ1dHlOKzE4UmI0ZDBCd2R4dXA0aktnNXlyU1o4ZApESnA3emZnRVN2NnF3ekpvdXhmS1crcGZ1eWM1bGlhSVJnUjhVbUYyK2g4VEVaZzc3L1ppd3J0YWorSkx5V2MvCk10aHFONkNhYkt6bEN0Z0FlNlArbk5sZjh1eHNnTlBWZzhyVQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
          users:
          - name: frontend-gha
            user:
              token: $TOKEN
          contexts:
          - name: teleport.mindbox.ru-ru-staging-yc-kube-cdp-mixed1-frontend-gha
            context:
              user: frontend-gha
              cluster: teleport.mindbox.ru-ru-staging-yc-kube-cdp-mixed1
              namespace: microfrontends
          current-context: teleport.mindbox.ru-ru-staging-yc-kube-cdp-mixed1-frontend-gha" | base64 -w 0)
          echo "KUBECONFIG_ENCODED=$kubeconfig_encoded" >> $GITHUB_ENV
        shell: bash
        env:
          TOKEN: ${{ secrets.kube_dev_config_k8 }}

      - name: Cleanup cluster from hot-testing
        if: ${{ inputs.hot_testing_k8 || inputs.hot_testing }}
        uses: wahyd4/kubectl-helm-action@master
        env:
          # Config file generated by this manual
          # https://cloud.yandex.ru/docs/managed-kubernetes/operations/create-static-conf
          KUBE_CONFIG_DATA: ${{ env.KUBECONFIG_ENCODED }}
        with:
          args: kubectl delete -f ./hot_build/hot-testing/kubernetes/deploy-k8.yml
        continue-on-error: true

# ---------------------- e2e_testing_k8 -------------------

      - name: Set variables in e2e deployment.yml
        if: ${{ inputs.e2e_testing_k8 || inputs.e2e_testing }}
        run: sed -i "s~HASH_PAYLOAD~$HASH_PAYLOAD~g" ./kubernetes/deploy-k8.yml
        env:
          HASH_PAYLOAD: ${{ env.hash_payload }}
        working-directory: ./hot_build/e2e
        continue-on-error: true

      - name: Cleanup cluster from e2e
        if: ${{ inputs.e2e_testing_k8 || inputs.e2e_testing }}
        uses: wahyd4/kubectl-helm-action@master
        env:
            # Config file generated by this manual
            # https://cloud.yandex.ru/docs/managed-kubernetes/operations/create-static-conf
          KUBE_CONFIG_DATA: ${{ secrets.kube_dev_config_k8 }}
        with:
          args: kubectl delete -f ./hot_build/e2e/kubernetes/deploy-k8.yml
        continue-on-error: true

# ---------------------- END e2e_testing_k8 -------------------
