name: 'Composite Terraform'
description: 'Composite Terraform GitHub Actions'
inputs:
  terraformVersion:
    description: ''
    required: true
  githubToken:
    description: ''
    required: true
  workingDir:
    description: ''
    required: true
  tfBackendAccessKey:
    description: ''
    required: true
  tfBackendSecretKey:
    description: ''
    required: true
  vaultToken:
    description: ''
    required: true
    default: ''
  planAdditionalVars:
    description: ''
    required: false
    default: ''
  tokenKeyFile:
    description: ''
    required: false
    default: "token.json"
outputs: {}
runs:
  using: "composite"
  steps:
    - name: "Setup Terraform"
      uses: hashicorp/setup-terraform@v1
      with:
          terraform_version: ${{ inputs.terraformVersion }}
          terraform_wrapper: false

    - name: "Terraform Format"
      id: fmt
      run: terraform fmt
      # continue-on-error: true
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Terraform Init"
      id: init
      run: terraform init
        -backend-config="access_key=${{ inputs.tfBackendAccessKey }}"
        -backend-config="secret_key=${{ inputs.tfBackendSecretKey }}"
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Terraform Validate"
      id: validate
      run: terraform validate -no-color
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Replace secrets in key file"
      run: |
        echo "--- Replace secrets in key file"
        sed -i 's:#{VAULT_TOKEN}:'${{ inputs.vaultToken }}':' ${{ inputs.tokenKeyFile }}
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Terraform Plan"
      id: plan
      run: |
        set +e
        PLAN="terraform plan ${{ inputs.planAdditionalVars }} -no-color -out=plan.tfplan -detailed-exitcode"
        $PLAN
        echo "planExitCode=$?" >> $GITHUB_OUTPUT
        exit 0
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Fail if plan failed"
      id: failIfPlanFailed
      run: |
        set -x
        if [[ ${{ steps.plan.outputs.planExitCode }} -eq 1 ]]; then
          echo "planExitCode is: ${{ steps.plan.outputs.planExitCode }}"
          echo "debug plan failed"
          exit 1
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Setup Terraform"
      uses: hashicorp/setup-terraform@v1
      with:
          terraform_version: ${{ inputs.terraformVersion }}

    - name: "Terraform Show"
      id: show
      run: |
        if [[ ${{ steps.plan.outputs.planExitCode }} -ne 0 ]]; then
          terraform show -no-color plan.tfplan
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - uses: actions/github-script@0.9.0
      name: "Comment plan"
      env:
        PLAN: "${{ steps.show.outputs.stdout }}"
        CONDITION: "${{ steps.plan.outputs.planExitCode }}"
      with:
        github-token: ${{ inputs.githubToken }}
        script: |
          if (process.env.CONDITION == "2") {
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`Success with non-empty diff\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.workingDir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
