name: 'Composite Terraform'
description: 'Composite Terraform GitHub Actions'
inputs:
  terraformVersion:
    description: ''
    required: true
  githubToken:
    description: ''
    required: true
  workingDir:
    description: ''
    required: true
  serviceAccountKey:
    description: ''
    required: false
    default: ''
  serviceAccountKeyFile:
    description: ''
    required: false
    default: "deployment_key.json"
  tfBackendAccessKey:
    description: ''
    required: true
  tfBackendSecretKey:
    description: ''
    required: true
  planAdditionalVars:
    description: ''
    required: false
    default: ''
  legacyReplaceSecretKey:
    description: 'Legacy ci step for Replace secrets in IAM key file'
    required: false
    default: ''
  isLegacyProject:
    description: 'Legacy ci step for Replace secrets in IAM key file'
    required: false
    default: '0' # 0 == false, 1 == true
outputs: {}
runs:
  using: "composite"
  steps:
    - name: "Setup Terraform"
      uses: hashicorp/setup-terraform@v2
      with:
          terraform_version: ${{ inputs.terraformVersion }}
          terraform_wrapper: false

    - name: "Terraform Format"
      id: fmt
      run: terraform fmt
      # continue-on-error: true
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Terraform Init"
      id: init
      run: terraform init
        -backend-config="access_key=${{ inputs.tfBackendAccessKey }}"
        -backend-config="secret_key=${{ inputs.tfBackendSecretKey }}"
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    # - name: "Terraform Validate"
    #   id: validate
    #   run: terraform validate -no-color
    #   working-directory: ${{ inputs.workingDir }}
    #   shell: bash

    - name: "Terraform Validate"
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.14.8
        tf_actions_subcommand: "validate"
        tf_actions_working_dir: ${{ inputs.workingDir }}

    - name: "Replace secrets in IAM key file"
      run: |
        if [[ ${{ inputs.isLegacyProject }} -eq "1" ]]; then
          echo "--- RUN OLD STEP: Replace secrets in IAM key file"
          private_key=$(echo '${{ inputs.legacyReplaceSecretKey }}' | sed 's:[\/&]:\\&:g;$!s/$/\\/')
          sed -i 's:#{PRIVATE_KEY}:'"$private_key"':' ${{ inputs.serviceAccountKeyFile }}
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Terraform Plan"
      id: plan
      run: |
        set +e
        PLAN="terraform plan ${{ inputs.planAdditionalVars }} -no-color -out=plan.tfplan -detailed-exitcode"
        $PLAN
        echo "planExitCode=$?" >> $GITHUB_OUTPUT
        exit 0
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Fail if plan failed"
      id: failIfPlanFailed
      run: |
        set -x
        if [[ ${{ steps.plan.outputs.planExitCode }} -eq 1 ]]; then
          echo "debug plan failed"
          exit 1
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Setup Terraform"
      uses: hashicorp/setup-terraform@v2
      with:
          terraform_version: ${{ inputs.terraformVersion }}

    - name: "Terraform Show"
      id: show
      run: |
        if [[ ${{ steps.plan.outputs.planExitCode }} -ne 0 ]]; then
          terraform show -no-color plan.tfplan
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Truncate plan"
      id: truncate-plan
      working-directory: ${{ inputs.workingDir }}
      shell: bash
      run: |
        plan="$(terraform show -no-color plan.tfplan)"
        plan=$(echo "$plan" | sed -r 's/^([[:blank:]]*)([-+~])/\2\1/g')
        plan=$(echo "$plan" | sed -r 's/^~/!/g')
        original_length=${#plan}
        if (($original_length > 65536)); then truncated=true; else truncated=false; fi
        echo "truncated=${truncated}" >> $GITHUB_OUTPUT
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "stdout<<$EOF" >> $GITHUB_OUTPUT
        echo "${plan:0:65536}" >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT

    # for escape github debug stdout
    - name: "Create truncated plan file"
      id: create-truncated-plan-file
      working-directory: ${{ inputs.workingDir }}
      shell: bash
      run: |
        plan_file_name='plan.stdout'
        cat << EOF > $plan_file_name
        ${{ steps.truncate-plan.outputs.stdout }}
        EOF
        echo "plan_file_name=${plan_file_name}" >> $GITHUB_OUTPUT

    - uses: actions/github-script@v6
      name: "Comment plan"
      env:
        SHOW_PLAN: "${{ steps.truncate-plan.outputs.truncated != 'true' }}"
        CONDITION: "${{ steps.plan.outputs.planExitCode }}"
      with:
        github-token: ${{ inputs.githubToken }}
        script: |
          if (process.env.CONDITION == "2") {
            let planMessage;
            if (process.env.SHOW_PLAN == "true") {
              const { readFile } = require("fs/promises")
              const plan = await readFile('${{ inputs.workingDir }}/${{ steps.create-truncated-plan-file.outputs.plan_file_name }}')
              planMessage = `\`\`\`terraform\n ${plan} \n\`\`\``
            }
            else {
              planMessage = "Plan too long for a message. Please, refer to [Github Action logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})."
            }

            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`Success with non-empty diff\`

            <details><summary>Show Plan</summary>

            ${planMessage}

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.workingDir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
