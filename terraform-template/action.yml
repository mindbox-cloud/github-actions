name: 'Composite Terraform'
description: 'Composite Terraform GitHub Actions'
inputs:
  terraformVersion:
    description: ''
    required: true
  githubToken: 
    description: ''
    required: true
  instancesDir:
    description: ''
    required: true
  ycServiceAccountKey: # todo: use universal NAME or IF in steps
    description: ''
    required: true
  ycServiceAccountKeyFile: # todo: use universal NAME or IF in steps
    description: ''
    required: true
  tfActionsWorkingDir: # todo: use universal NAME or IF in steps
    description: ''
    required: true
  OCTOPUS_MINDBOX_GITHUB_TOKEN: # todo: use universal NAME or IF in steps
    description: ''
    required: true
  TF_SECRETS_BACKEND_ACCESS_KEY: # todo: use universal NAME or IF in steps
    description: ''
    required: true
  TF_SECRETS_BACKEND_SECRET_KEY: # todo: use universal NAME or IF in steps
    description: ''
    required: true
  YC_CDP_STAGING_STATIC_ACCESS_KEY: # todo: use universal NAME or IF in steps
    description: ''
    required: true
  YC_CDP_STAGING_STATIC_SECRET_KEY: # todo: use universal NAME or IF in steps
    description: ''
    required: true
outputs: {}
runs:
  using: "composite"
  steps:
    - name: "Setup Terraform"
      uses: hashicorp/setup-terraform@v1
      with:
          terraform_version: ${{ inputs.terraformVersion }}

    - name: "Terraform Format"
      id: fmt
      run: terraform fmt
      # continue-on-error: true
      working-directory: 'yandex/staging' # todo: must be dynamic variable
      shell: bash

    - name: "Setup github token for module repo"
      run: |
        git config --local --remove-section http."https://github.com/"
        git config --global url."https://octopus-mindbox:${OCTOPUS_MINDBOX_GITHUB_TOKEN}@github.com/mindbox-moscow".insteadOf "https://github.com/mindbox-moscow"
      env:
        OCTOPUS_MINDBOX_GITHUB_TOKEN: ${{ inputs.OCTOPUS_MINDBOX_GITHUB_TOKEN }}
      working-directory: 'yandex/staging' # todo: must be dynamic variable
      shell: bash

    - name: "Terraform Init"
      id: init
      run: terraform init
        -backend-config="access_key=${{ inputs.TF_SECRETS_BACKEND_ACCESS_KEY }}"
        -backend-config="secret_key=${{ inputs.TF_SECRETS_BACKEND_SECRET_KEY }}"
      working-directory: 'yandex/staging' # todo: must be dynamic variable
      shell: bash

    - name: "Terraform Validate"
      id: validate
      run: terraform validate -no-color
      working-directory: 'yandex/staging'
      shell: bash

    - name: "Replace secrets in IAM key file"
      run: |
        echo '${{ inputs.ycServiceAccountKey }}' > ${{ inputs.ycServiceAccountKeyFile }}
      working-directory: 'yandex/staging' # todo: must be dynamic variable
      shell: bash

    - name: "Path" # Only For Testing, try working-directory
      run: ls -la 
      working-directory: 'yandex/staging' # todo: must be dynamic variable
      shell: bash
      
    - name: "Terraform Plan"
      id: plan
      run: terraform plan -no-color
          -var="deployer_cdp_credentials={access_key=\"${{ inputs.YC_CDP_STAGING_STATIC_ACCESS_KEY }}\",secret_key=\"${{ inputs.YC_CDP_STAGING_STATIC_SECRET_KEY }}\"}"
          -out=plan.tfplan
          -detailed-exitcode
      working-directory: 'yandex/staging' # todo: must be dynamic variable
      # continue-on-error: true
      shell: bash

    - name: "Fail if plan failed"
      id: failIfPlanFailed
      # if: steps.plan.outputs.exitcode == '1'
      # run: (exit 1)
      run: |
        if [ ${{ steps.plan.outputs.exitcode }} -eq 1 ]; then
          echo "Result is ${{ steps.plan.outputs.exitcode }}"
        else
          echo "Ather result"
        fi
      working-directory: 'yandex/staging' # todo: must be dynamic variable
      shell: bash
    
    # - name: "Terraform Show"
    #   id: show
    #   if: steps.plan.outputs.exitcode != '0'
    #   run: terraform show -no-color plan.tfplan

    # - uses: actions/github-script@0.9.0
    #   name: "Comment plan"
    #   if: steps.plan.outputs.exitcode == '2'
    #   env:
    #     PLAN: "terraform\n${{ steps.show.outputs.stdout }}"
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #       #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
    #       #### Terraform Plan üìñ\`Success with non-empty diff\`

    #       <details><summary>Show Plan</summary>

    #       \`\`\`${process.env.PLAN}\`\`\`

    #       </details>

    #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.tfActionsWorkingDir }}\`, Workflow: \`${{ github.workflow }}\`*`;

    #       github.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })
