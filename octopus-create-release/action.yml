name: 'Create Octopus Release'
description: 'Create Release for Octopus'
inputs:
  mode:
    description: 'Mode: check/release'
    required: false
    default: 'release'
  space:
    description: 'Space in Octopus'
    required: false
    default: 'Spaces-1'
  project:
    description: 'Project'
    required: true
  env:
    description: 'Project Env'
    required: false
  release-number:
    description: 'Release Number from GitHub'
    required: true
  octopus-server:
    description: 'Octopus Server Url'
    required: true
  octopus-api-key:
    description: 'Octopus Api Key'
    required: true
  additional_params_values:
    description: 'Additional Parameters and Values for Creating Release'
    required: false
outputs: {}
runs:
  using: "composite"
  steps:
    - uses: actions/download-artifact@master
      with:
        name: release-notes-artifact

    - name: "Check release notes existence"
      id: check_files
      uses: andstor/file-existence-action@v1
      with:
        files: "releasenotes.txt"

    - name: Create Release Notes File
      if: steps.check_files.outputs.files_exists != 'true'
      uses: mindbox-moscow/github-actions/create-release-notes@lysychenko/create-release-octopus
      with:
        release-number: "${{ inputs.release-number }}"

    # - name: "Create ${{ inputs.project }} Octopus Release"
    #   if: ${{ inputs.mode == 'release' }}
    #   uses: docker://octopusdeploy/octo
    #   with:
    #     args: >
    #       create-release
    #       --server ${{ inputs.octopus-server }}
    #       --project "${{ inputs.project }}"
    #       --apikey ${{ inputs.octopus-api-key }}
    #       --version ${{ inputs.release-number }}
    #       --releaseNoteFile releasenotes.txt

    #       --packageVersion ${{ inputs.release-number }}
    #       --channel Default

    - name: "Create ${{ inputs.project }} ${{ inputs.mode == 'release' && 'Octopus Release' || 'Helm Diff'}}"
      # if: ${{ inputs.mode == 'check' }}
      uses: docker://octopusdeploy/octo
      env:
        package-version: ${{ inputs.mode == 'release' && "--packageVersion ${{ inputs.release-number }}" || "" }}
        channel: ${{ inputs.mode == 'release' && "--channel Default" || "" }}
        package: ${{ inputs.mode == 'check' && '--package "*:*:${{ inputs.release-number }}"' || "" }}
        deploy-to: ${{ inputs.mode == 'check' && "--deployTo ${{ inputs.env }}" || "" }}
        wait-for-deployment: ${{ inputs.mode == 'check' && "--waitForDeployment" || "" }}
        cancel-on-timeout: ${{ inputs.mode == 'check' && "--cancelOnTimeout" || "" }}
        deployment-timeout: ${{ inputs.mode == 'check' && '--deploymentTimeout "00:20:00"' || "" }}
        progress: ${{ inputs.mode == 'check' && "--progress" || "" }}
      with:
        args: >
          create-release
          --server ${{ inputs.octopus-server }}
          --project "${{ inputs.project }}"
          --apikey ${{ inputs.octopus-api-key }}
          --version "${{ inputs.release-number }}"
          --releaseNoteFile releasenotes.txt
          ${{ package-version }}
          ${{ channel }}
          ${{ package }}
          ${{ deploy-to }}
          ${{ wait-for-deployment }}
          ${{ cancel-on-timeout }}
          ${{ deployment-timeout }}
          ${{ progress }}

# --package "*:*:${{ inputs.release-number }}"
# --deployTo "${{ inputs.env }}"
# --waitForDeployment
# --cancelOnTimeout
# --deploymentTimeout "00:20:00"
# --progress
# ${{ inputs.additional_params_values }}
