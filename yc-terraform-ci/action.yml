name: 'Composite Terraform'
description: 'Composite Terraform GitHub Actions'
inputs:
  terraformVersion:
    description: ''
    required: true
  githubToken: 
    description: ''
    required: true
  mindboxOrgGithubToken:
    description: 'Used to download organization wide resources, like terraform-modules repo'
    required: true
  workingDir:
    description: ''
    required: true
  serviceAccountKey:
    description: ''
    required: true
  serviceAccountKeyFile:
    description: ''
    required: false
    default: "deployment_key.json"
  tfBackendAccessKey:
    description: ''
    required: true
  tfBackendSecretKey:
    description: ''
    required: true
  planAdditionalVars:
    description: ''
    required: false
    default: ''
outputs: {}
runs:
  using: "composite"
  steps:
    - name: "Setup Terraform"
      uses: hashicorp/setup-terraform@v1
      with:
          terraform_version: ${{ inputs.terraformVersion }}

    - name: "Terraform Format"
      id: fmt
      run: terraform fmt
      # continue-on-error: true
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Setup github token for module repo"
      run: |
        git config --local --remove-section http."https://github.com/"
        git config --global url."https://octopus-mindbox:${OCTOPUS_MINDBOX_GITHUB_TOKEN}@github.com/mindbox-moscow".insteadOf "https://github.com/mindbox-moscow"
      env:
        OCTOPUS_MINDBOX_GITHUB_TOKEN: ${{ inputs.mindboxOrgGithubToken }}
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Terraform Init"
      id: init
      run: terraform init
        -backend-config="access_key=${{ inputs.tfBackendAccessKey }}"
        -backend-config="secret_key=${{ inputs.tfBackendSecretKey }}"
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Terraform Validate"
      id: validate
      run: terraform validate -no-color
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Replace secrets in IAM key file"
      run: |
        echo '${{ inputs.serviceAccountKey }}' > ${{ inputs.serviceAccountKeyFile }}
      working-directory: ${{ inputs.workingDir }}
      shell: bash
      
    # - name: "---REMOVE THIS JOB---"
    #   run: |
    #     for line in ${{ inputs.planAdditionalVars }}
    #     do
    #       echo "for line is: $line"
    #     done
    #     # echo ${{ inputs.planAdditionalVars }}
    #   working-directory: ${{ inputs.workingDir }}
    #   shell: bash

    - name: "Terraform Plan"
      id: plan
      run: |
        PLAN="terraform plan -no-color ${{ inputs.planAdditionalVars }}  -out=plan.tfplan -detailed-exitcode"
        $PLAN
      working-directory: ${{ inputs.workingDir }}
      # continue-on-error: true
      # env:
      #   PLAN: "terraform plan -no-color ${{ planAdditionalVars }}  -out=plan.tfplan -detailed-exitcode"
      shell: bash

    - name: "Fail if plan failed"
      id: failIfPlanFailed
      run: |
        if [ ${{ steps.plan.outputs.exitcode }} -eq 1 ]; then
          exit 1
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash
    
    - name: "Terraform Show"
      id: show
      run: |
        if [ ${{ steps.plan.outputs.exitcode }} -ne 0]; then
          terraform show -no-color plan.tfplan
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - uses: actions/github-script@0.9.0
      name: "Comment plan"
      env:
        PLAN: "terraform\n${{ steps.show.outputs.stdout }}"
        CONDITION: "${{ steps.plan.outputs.exitcode }}"
      with:
        github-token: ${{ inputs.githubToken }}
        script: |
          if (process.env.CONDITION == "2") {
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`Success with non-empty diff\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.workingDir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
