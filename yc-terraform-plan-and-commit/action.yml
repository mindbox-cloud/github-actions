name: 'Composite Terraform'
description: 'Composite Terraform GitHub Actions'
inputs:
  terraformVersion:
    description: ''
    required: true
  githubToken: 
    description: ''
    required: true
  instancesDir:
    description: ''
    required: true
  serviceAccountKey:
    description: ''
    required: true
  serviceAccountKeyFile:
    description: ''
    required: true
    default: "deployment_key.json"
  octopusMindboxGithubToken:
    description: ''
    required: true
  backendAccessKey:
    description: ''
    required: true
  backendSecretKey:
    description: ''
    required: true
  YC_CDP_STATIC_ACCESS_KEY:
    description: ''
    required: true
  YC_CDP_STATIC_SECRET_KEY:
    description: ''
    required: true
  planAdditionalVars:
    description: ''
    required: true
    default: 'planAdditionalVars is empty'
outputs: {}
runs:
  using: "composite"
  steps:
    - name: "Setup Terraform"
      uses: hashicorp/setup-terraform@v1
      with:
          terraform_version: ${{ inputs.terraformVersion }}

    - name: "Terraform Format"
      id: fmt
      run: terraform fmt
      # continue-on-error: true
      working-directory: ${{ inputs.instancesDir }}
      shell: bash

    - name: "Setup github token for module repo"
      run: |
        git config --local --remove-section http."https://github.com/"
        git config --global url."https://octopus-mindbox:${OCTOPUS_MINDBOX_GITHUB_TOKEN}@github.com/mindbox-moscow".insteadOf "https://github.com/mindbox-moscow"
      env:
        OCTOPUS_MINDBOX_GITHUB_TOKEN: ${{ inputs.octopusMindboxGithubToken }}
      working-directory: ${{ inputs.instancesDir }}
      shell: bash

    - name: "Terraform Init"
      id: init
      run: terraform init
        -backend-config="access_key=${{ inputs.backendAccessKey }}"
        -backend-config="secret_key=${{ inputs.backendSecretKey }}"
      working-directory: ${{ inputs.instancesDir }}
      shell: bash

    - name: "Terraform Validate"
      id: validate
      run: terraform validate -no-color
      working-directory: ${{ inputs.instancesDir }}
      shell: bash

    - name: "Replace secrets in IAM key file"
      run: |
        echo '${{ inputs.serviceAccountKey }}' > ${{ inputs.serviceAccountKeyFile }}
      working-directory: ${{ inputs.instancesDir }}
      shell: bash
      
    - name: "---REMOVE THIS JOB---"
      run: |
        for line in ${{ inputs.planAdditionalVars }}
        do
          echo "for line is: $line"
        done
        # echo ${{ inputs.planAdditionalVars }}
      working-directory: ${{ inputs.instancesDir }}
      shell: bash

    - name: "Terraform Plan"
      id: plan
      run: terraform plan -no-color
          -var="deployer_cdp_credentials={access_key=\"${{ inputs.YC_CDP_STATIC_ACCESS_KEY }}\",secret_key=\"${{ inputs.YC_CDP_STATIC_SECRET_KEY }}\"}"
          -out=plan.tfplan
          -detailed-exitcode
      working-directory: ${{ inputs.instancesDir }}
      # continue-on-error: true
      shell: bash

    - name: "Fail if plan failed"
      id: failIfPlanFailed
      run: |
        if [ ${{ steps.plan.outputs.exitcode }} -eq 1 ]; then
          exit 1
        fi
      working-directory: ${{ inputs.instancesDir }}
      shell: bash
    
    - name: "Terraform Show"
      id: show
      run: |
        if [ ${{ steps.plan.outputs.exitcode }} -ne 0]; then
          terraform show -no-color plan.tfplan
        fi
      working-directory: ${{ inputs.instancesDir }}
      shell: bash

    - uses: actions/github-script@0.9.0
      name: "Comment plan"
      env:
        PLAN: "terraform\n${{ steps.show.outputs.stdout }}"
        CONDITION: "${{ steps.plan.outputs.exitcode }}"
      with:
        github-token: ${{ inputs.githubToken }}
        script: |
          if (process.env.CONDITION == "2") {
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`Success with non-empty diff\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.instancesDir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }