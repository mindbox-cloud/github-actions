name: 'Composite Kafka Terraform check'
description: 'Composite Kafka Terraform GitHub Actions'
inputs:
  terraformVersion:
    description: ''
    required: true
  githubToken: 
    description: ''
    required: true
  mindboxOrgGithubToken:
    description: 'Used to download organization wide resources, like terraform-modules repo'
    required: false
    default: ''
  workingDir:
    description: ''
    required: true
  serviceAccountKey:
    description: ''
    required: false
    default: ''
  serviceAccountKeyFile:
    description: ''
    required: false
    default: "deployment_key.json"
  tfBackendAccessKey:
    description: ''
    required: true
  tfBackendSecretKey:
    description: ''
    required: true
  planAdditionalVars:
    description: ''
    required: false
    default: ''
  legacyReplaceSecretKey:
    description: 'Legacy ci step for Replace secrets in IAM key file'
    required: false
    default: ''
  isLegacyProject:
    description: 'Legacy ci step for Replace secrets in IAM key file'
    required: false
    default: '0' # 0 == false, 1 == true
outputs: {}
runs:
  using: "composite"
  steps:
    - name: "Setup Terraform"
      uses: hashicorp/setup-terraform@v1
      with:
          terraform_version: ${{ inputs.terraformVersion }}
          terraform_wrapper: false

    - name: "Terraform Format"
      id: fmt
      run: terraform fmt
      # continue-on-error: true
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Setup github token for module repo"
      run: |
        if [[ ${{ inputs.isLegacyProject }} -ne "1" ]] && [[ ${{ inputs.isLegacyProject }} -ne "3" ]] ; then
          echo "--- RUN STEP: Setup github token for module repo"

          git config --local --remove-section http."https://github.com/"
          git config --global url."https://octopus-mindbox:${OCTOPUS_MINDBOX_GITHUB_TOKEN}@github.com/mindbox-moscow".insteadOf "https://github.com/mindbox-moscow"
        fi
      env:
        OCTOPUS_MINDBOX_GITHUB_TOKEN: ${{ inputs.mindboxOrgGithubToken }}
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Terraform Init"
      id: init
      run: terraform init
        -backend-config="access_key=${{ inputs.tfBackendAccessKey }}"
        -backend-config="secret_key=${{ inputs.tfBackendSecretKey }}"
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Terraform Validate"
      id: validate
      run: terraform validate -no-color
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Replace secrets in IAM key file"
      run: |
        if [[ ${{ inputs.isLegacyProject }} -eq "1" || ${{ inputs.isLegacyProject }} -eq "2" ]]; then
          echo "--- RUN OLD STEP: Replace secrets in IAM key file"
          private_key=$(echo '${{ inputs.legacyReplaceSecretKey }}' | sed 's:[\/&]:\\&:g;$!s/$/\\/')
          sed -i 's:#{PRIVATE_KEY}:'"$private_key"':' ${{ inputs.serviceAccountKeyFile }}
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Replace secrets in IAM key file"
      run: |
        if [[ ${{ inputs.isLegacyProject }} -eq "0" ]]; then
          echo "--- RUN NEW STEP: Replace secrets in IAM key file"
          echo '${{ inputs.serviceAccountKey }}' > ${{ inputs.serviceAccountKeyFile }}
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    # FIXME: 
    # https://github.com/actions/runner/issues/646
    - name: "Terraform Plan"
      id: plan
      run: |
        set +e
        PLAN="terraform plan ${{ inputs.planAdditionalVars }} -no-color -out=plan.tfplan -detailed-exitcode"
        echo "::set-output name=planExitCode::$?"
        exit 0
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Fail if plan failed"
      id: failIfPlanFailed
      run: |
        set -x
        if [[ ${{ steps.plan.outputs.planExitCode }} -eq 1 ]]; then
          echo "debug plan failed"
          exit 1
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash
    
    - name: "Setup Terraform"
      uses: hashicorp/setup-terraform@v1
      with:
          terraform_version: ${{ inputs.terraformVersion }}

    - name: "Terraform Show"
      id: show
      run: |
        if [[ ${{ steps.plan.outputs.planExitCode }} -ne 0 ]]; then
          terraform show -no-color plan.tfplan
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash

    - name: "Kafka check"
      id: kafkaCheck
      env:
        PLAN: "${{ steps.show.outputs.stdout }}"
      run: |
        if test "$(echo "$PLAN" | grep -oP '# module\.kafka.*[broker|zookeeper]\[\K(".*")+(?=\]\..*in\-place)' | sort -u | wc -l)" -gt 1; then
          RED='\033[0;31m'
          echo -e "${RED} You must update kafka brokers one by one only!"
          exit 1
        fi
      working-directory: ${{ inputs.workingDir }}
      shell: bash
