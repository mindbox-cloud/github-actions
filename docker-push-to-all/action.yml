name: 'Push to AWS ECR & yandex container registry'
description: 'Push to AWS ECR & yandex container registry'
inputs:
  awsAccessKey:
    description: 'Required if "aws" registry is set.'
    required: false
  awsSecretKey:
    description: 'Required if "aws" registry is set.'
    required: false
  awsRegion:
    description: 'Required if "aws" registry is set.'
    required: false
    default: 'eu-central-1'
  awsAccountId:
    description: 'Required if "aws" registry is set.'
    required: false
    default: '515260921971'
  awsOrganizationId:
    description: 'Required if "aws" registry is set.'
    required: false
  yandexContainerRegistryId:
    description: 'Required if "yc" registry is set.'
    required: false
    default: 'crpo9tj76o3c7pi8i72n'
  yandexContainerRegistryKey:
    description: 'Required if "yc" registry is set.'
    required: false
  registries:
    description: 'Comma separated registries. Valid values are: "yc", "aws"'
    required: true
  sourceRegistry:
    description: 'Registry or namespace where the Docker image originates before re-tagging for deployment.'
    required: false
    default: 'local'
  repositories:
    description: 'Comma separated (e.g. a,b,c). Images local/repo[0]/localTag MUST be pre-built'
    required: true
  localTag:
    description: 'Tag for locally built image.'
    required: true
  targetTags:
    description: 'Comma separated (e.g. a,b,c).'
    required: true
outputs: {}
runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      if: ${{ contains(inputs.registries, 'aws') }}
      shell: bash
      run: |
        aws configure set aws_access_key_id ${{ inputs.awsAccessKey }}
        aws configure set aws_secret_access_key ${{ inputs.awsSecretKey }}
        aws configure set region ${{ inputs.awsRegion }}

    - name: Login to Amazon ECR
      if: ${{ contains(inputs.registries, 'aws') }}
      uses: nick-fields/retry@v3
      env:
        AWS_REGISTRY: "${{ inputs.awsAccountId }}.dkr.ecr.${{ inputs.awsRegion }}.amazonaws.com"
      with:
        timeout_seconds: 60
        retry_wait_seconds: 1
        max_attempts: 3
        shell: bash
        command: |
          aws ecr get-login-password --region ${{ inputs.awsRegion }} | \
          docker login --username AWS --password-stdin ${{ env.AWS_REGISTRY }}
        on_retry_command: |
          ping -c 5 aws.amazon.com
          nslookup aws.amazon.com
          nc -vz4 aws.amazon.com 443

    - name: Prepare policy file
      if: ${{ contains(inputs.registries, 'aws') }}
      working-directory: ${{ github.action_path }}
      shell: bash
      run: |
        sed -i -e 's/ORGANIZATION_ID/${{ inputs.awsOrganizationId }}/g' ecr-policy.json

    - name: Create AWS ECR repositories if needed
      if: ${{ contains(inputs.registries, 'aws') }}
      uses: nick-fields/retry@v3
      with:
        timeout_seconds: 60
        retry_wait_seconds: 1
        max_attempts: 3
        shell: bash
        command: |
          IFS=',' read -r -a array <<< "${{ inputs.repositories }}"
          for repo in "${array[@]}"
          do
            aws ecr describe-repositories --repository-names $repo || \
            aws ecr create-repository --repository-name $repo && \
            aws ecr set-repository-policy --repository-name $repo --policy-text file://${{ github.action_path }}/ecr-policy.json
          done
        on_retry_command: |
          ping -c 5 aws.amazon.com
          nslookup aws.amazon.com
          nc -vz4 aws.amazon.com 443

    - name: Push to AWS ECR
      if: ${{ contains(inputs.registries, 'aws') }}
      uses: nick-fields/retry@v3
      env:
        AWS_REGISTRY: "${{ inputs.awsAccountId }}.dkr.ecr.${{ inputs.awsRegion }}.amazonaws.com"
      with:
        timeout_seconds: 120
        retry_wait_seconds: 1
        max_attempts: 3
        shell: bash
        command: |
          IFS=',' read -r -a array <<< "${{ inputs.repositories }}"
          for repo in "${array[@]}"
          do
            IFS=',' read -r -a tags <<< "${{ inputs.targetTags }}"
            for targetTag in "${tags[@]}"
            do
              docker tag ${{ inputs.sourceRegistry }}/$repo:${{ inputs.localTag }} ${{ env.AWS_REGISTRY }}/$repo:$targetTag
              docker push ${{ env.AWS_REGISTRY }}/$repo:$targetTag
            done
          done
        on_retry_command: |
          ping -c 5 ${{ env.AWS_REGISTRY }}
          nslookup ${{ env.AWS_REGISTRY }}
          nc -vz4 ${{ env.AWS_REGISTRY }} 443

    - name: Pull from AWS ECR
      if: ${{ contains(inputs.registries, 'aws') }}
      uses: nick-fields/retry@v3
      env:
        AWS_REGISTRY: "${{ inputs.awsAccountId }}.dkr.ecr.${{ inputs.awsRegion }}.amazonaws.com"
      with:
        timeout_seconds: 120
        retry_wait_seconds: 1
        max_attempts: 3
        shell: bash
        command: |
          IFS=',' read -r -a array <<< "${{ inputs.repositories }}"
          for repo in "${array[@]}"
          do
            IFS=',' read -r -a tags <<< "${{ inputs.targetTags }}"
            for targetTag in "${tags[@]}"
            do
              docker pull ${{ env.AWS_REGISTRY }}/$repo:$targetTag
            done
          done
        on_retry_command: |
          ping -c 5 ${{ env.AWS_REGISTRY }}
          nslookup ${{ env.AWS_REGISTRY }}
          nc -vz4 ${{ env.AWS_REGISTRY }} 443
    
    - name: Authenticate in Yandex CR
      if: ${{ contains(inputs.registries, 'yc') }}
      uses: nick-fields/retry@v3
      with:
        timeout_seconds: 60
        retry_wait_seconds: 1
        max_attempts: 3
        shell: bash
        command: echo '${{ inputs.yandexContainerRegistryKey }}' | docker login -u json_key --password-stdin cr.yandex
        on_retry_command: |
          ping -c 5 cr.yandex
          nslookup cr.yandex
          nc -vz4 cr.yandex 443

    - name: Push to Yandex CR
      if: ${{ contains(inputs.registries, 'yc') }}
      uses: nick-fields/retry@v3
      env:
        YC_REGISTRY: "cr.yandex/${{ inputs.yandexContainerRegistryId }}"
      with:
        timeout_seconds: 120
        retry_wait_seconds: 1
        max_attempts: 3
        shell: bash
        command: |
          IFS=',' read -r -a array <<< "${{ inputs.repositories }}"
          for repo in "${array[@]}"
          do
            IFS=',' read -r -a tags <<< "${{ inputs.targetTags }}"
            for targetTag in "${tags[@]}"
            do
              docker tag ${{ inputs.sourceRegistry }}/$repo:${{ inputs.localTag }} ${{ env.YC_REGISTRY }}/$repo:$targetTag
              docker push ${{ env.YC_REGISTRY }}/$repo:$targetTag
            done
          done
        on_retry_command: |
          ping -c 5 cr.yandex
          nslookup cr.yandex
          nc -vz4 cr.yandex 443

    - name: Pull from Yandex CR
      if: ${{ contains(inputs.registries, 'yc') }}
      uses: nick-fields/retry@v3
      env:
        YC_REGISTRY: "cr.yandex/${{ inputs.yandexContainerRegistryId }}"
      with:
        timeout_seconds: 120
        retry_wait_seconds: 1
        max_attempts: 3
        shell: bash
        command: |
          IFS=',' read -r -a array <<< "${{ inputs.repositories }}"
          for repo in "${array[@]}"
          do
            IFS=',' read -r -a tags <<< "${{ inputs.targetTags }}"
            for targetTag in "${tags[@]}"
            do
              docker pull ${{ env.YC_REGISTRY }}/$repo:$targetTag
            done
          done
        on_retry_command: |
          ping -c 5 cr.yandex
          nslookup cr.yandex
          nc -vz4 cr.yandex 443
